'use client'
import { createClient } from '@/utils/supabase/client'
import Navbar from '@/components/Navbar'
import { useSearchParams } from 'next/navigation'
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation'


function formatMilliseconds(ms) {
    const totalSeconds = Math.floor(ms / 1000);
    const hours = Math.floor(totalSeconds / 3600)
        .toString()
        .padStart(2, "0");
    const minutes = Math.floor((totalSeconds % 3600) / 60)
        .toString()
        .padStart(2, "0");
    const seconds = (totalSeconds % 60).toString().padStart(2, "0");
    return `${hours}:${minutes}:${seconds}`;
}

export default function RecordRunWorkout() {
    const router = useRouter()
    const supabase = createClient()

    const searchParams = useSearchParams()
    const rawTime = searchParams.get('time');
    const duration = rawTime ? formatMilliseconds(Number(rawTime)) : "00:00:00";
    const rawDate = searchParams.get('date').slice(0, -3);
    const day = rawDate.split(" ")[0];
    const stamp = rawDate.split(" ")[1];

    const [workoutName, setWorkoutName] = useState('');
    const [milesRan, setMilesRan] = useState('');
    const [location, setLocation] = useState('');
    const [notes, setNotes] = useState('');
    const [userId, setUserId] = useState(null);
    
    useEffect(() => {
        const checkUser = async () => {
          const { data: { user } } = await supabase.auth.getUser()
          console.log("Logged-in user ID:", user?.id);
    
          if (!user) {
            router.push('/login')
          } else {
            setUserId(user.id);
          }
        }
        checkUser()
    }, [router])

    const handleSubmit = async (e) => {
        e.preventDefault(); // stop page reload

        const { data, error } = await supabase
            .from('workouts') // your table name
            .insert([
                {
                    user_id: userId,
                    duration: duration,
                    start_time: rawDate,
                    name: workoutName,
                    miles: milesRan,
                    location: location,
                    notes: notes,
                    type: "Run"
                }
            ]);

        if (error) {
            console.error('Error inserting workout:', error);
        } else {
            console.log('Workout inserted!', data);
            router.push('/'); 
        }
    };

    return (
        <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100">
            <h1 className="text-2xl font-bold mb-4">Record New Run Workout</h1>
            <form onSubmit={handleSubmit} className="flex flex-col gap-4">
                <div>  
                    <label>Duration: {duration}</label>
                </div>
                <div>
                    
                    <label>Date: {day} at {stamp}</label>
                </div>
                <div>
                    <label>Workout Name:</label>
                    <input
                        type="text"
                        value={workoutName}
                        onChange={(e) => setWorkoutName(e.target.value)}
                        className="border p-2"
                    />
                </div>
                <div>
                    <label>Miles Ran:</label>
                    <input
                        type="number"
                        value={milesRan}
                        onChange={(e) => setMilesRan(e.target.value)}
                        className="border p-2"
                    />
                </div>
                <div>
                    <label>Location:</label>
                    <input
                        type="text"
                        value={location}
                        onChange={(e) => setLocation(e.target.value)}
                        className="border p-2"
                    />
                </div>
                <div>
                    <label>Notes:</label>
                    <textarea
                        value={notes}
                        onChange={(e) => setNotes(e.target.value)}
                        rows="4"
                        className="border p-2"
                    />
                </div>
                <button type="submit" className="bg-blue-500 text-white p-2 rounded">
                    Submit
                </button>
            </form>
            <Navbar />
        </div>
    );
}